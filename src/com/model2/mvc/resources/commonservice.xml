<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"

	xmlns:context="http://www.springframework.org/schema/context"

	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:tx="http://www.springframework.org/schema/tx"

	xmlns:aop="http://www.springframework.org/schema/aop"

	xsi:schemaLocation="http://www.springframework.org/schema/beans 
								http://www.springframework.org/schema/beans/spring-beans.xsd
								
								http://www.springframework.org/schema/context
								http://www.springframework.org/schema/context/spring-context.xsd
								
								http://www.springframework.org/schema/aop
								http://www.springframework.org/schema/aop/spring-aop.xsd
								
								http://www.springframework.org/schema/tx
								http://www.springframework.org/schema/tx/spring-tx.xsd">


	<!-- PropertyPlaceholderConfigurer로 로드된 resource는 ${}로 접근 가능 -->

	<bean id="propertyConfigurer"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="location"
			value="classpath:com/model2/mvc/resources/jdbc.properties" />
	</bean>

	<!-- DBCP (Apache Commons Database Connection) 사용 -->
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource">
		<property name="driverClassName" value="${driver}" />
		<property name="url" value="${url}" />
		<property name="username" value="${username}" />
		<property name="password" value="${password}" />
		<property name="initialSize" value="${initialSize}" />
		<property name="maxActive" value="${maxActive}" />
	</bean>

	<!-- ㅇ SqlSession 인스턴스를 생성하는 SqlSessionFactory 생성 ㅇ Factory Pattern 적용 :: 
		Spring의 FactoryBean interface 구현 -->
	<bean id="sqlSessionFactoryBean" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="configLocation"
			value="classpath:com/model2/mvc/resources/mybatis-config.xml" />
	</bean>

	<!-- ㅇ SqlSessionTemplate 인스턴스 생성 ㅇ Spring 과 연동시 사용하는 핵심 SqlSession 구현체 
		ㅇ Spring 에서 제공하는 Transaction 처리에 구조화된 SqlSession 구현체 -->
	<bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg ref="sqlSessionFactoryBean" />
	</bean>

	<context:component-scan base-package="com.model2.mvc.service.user.impl" />
	<context:component-scan base-package="com.model2.mvc.service.product.impl" />

	<bean id="pojoAspect" class="com.model2.mvc.service.PojoAspectJ" />

	<aop:config>
		<aop:aspect ref="pojoAspect">
			<aop:around pointcut="execution(* com.model2.mvc.service.user..*Impl*.*(..))"
				method="invoke" />
		</aop:aspect>
	</aop:config>

	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<!-- Transaction advice 생성 :: method : transaction 적용 method :: propagation 
		: transaction 전파규칙(default : REQUIRED) :: read-only : 트랜잭션이 읽기만 가능(선택) -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<!-- get으로 시작되는 Method에 적용 transaction 규칙 -->
			<tx:method name="get*" propagation="REQUIRED" read-only="true" />
			<!-- add로 시작되는 Method에 적용 transaction 규칙 -->
			<tx:method name="add*" />
			<!-- 모든 Method에 적용 transaction 규칙 -->
			<!-- <tx:method name="*" /> -->
		</tx:attributes>
	</tx:advice>

	<!-- AOP : point-cut/advisor 설정 -->
	<aop:config>
		<aop:pointcut id="requiredTx"
			expression="execution(* com.model2.mvc.service..*ServiceImpl*.*(..))" />
		<aop:advisor advice-ref="txAdvice" pointcut-ref="requiredTx" />
	</aop:config>

</beans>